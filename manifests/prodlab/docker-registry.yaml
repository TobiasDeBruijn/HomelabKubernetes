apiVersion: v1
kind: PersistentVolume
metadata:
  name: docker-registry
  namespace: prodlab
spec:
  capacity:
    storage: 20Gi
  volumeMode: Filesystem
  accessModes:
  - ReadWriteMany
  persistentVolumeReclaimPolicy: Retain
  storageClassName: longhorn-static
  csi:
    driver: driver.longhorn.io
    fsType: ext4
    volumeAttributes:
      numberOfReplicas: '1'
      staleReplicaTimeout: '2880'
    volumeHandle: docker-registry
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: docker-registry
  namespace: prodlab
spec:
  accessModes:
  - ReadWriteMany
  resources:
    requests:
      storage: 20Gi
  volumeName: docker-registry
  storageClassName: longhorn-static
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: docker-registry
  namespace: prodlab
  labels:
    app.kubernetes.io/name: docker-registry
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: docker-registry
  template:
    metadata:
      labels:
        app.kubernetes.io/name: docker-registry
    spec:
      automountServiceAccountToken: false
      containers:
      - name: docker-registry
        image: registry:2.7.1
        securityContext:
          capabilities:
            drop:
            - CAP_NET_RAW
        ports:
        - containerPort: 5000
          name: main
        volumeMounts:
        - name: registry-storage
          mountPath: /var/lib/registry
      - name: docker-registry-ui
        image: joxit/docker-registry-ui:2.0
        env:
        - name: "REGISTRY_URL"
          value: "https://docker-registry.k8s.array21.dev"
        - name: "REGISTRY_TITLE"
          value: "Array21 Docker Registry"
        - name: "SINGLE_REGISTRY"
          value: "true"
        - name: "DELETE_IMAGES"
          value: "true"
        ports:
        - containerPort: 80
          name: interface
      volumes:
      - name: registry-storage
        persistentVolumeClaim:
          claimName: docker-registry
---
apiVersion: v1
kind: Service
metadata:
  name: docker-registry
  namespace: prodlab
spec:
  selector:
    app.kubernetes.io/name: docker-registry
  ports:
  - protocol: TCP
    name: main
    port: 443
    targetPort: 5000
  - protocol: TCP
    name: interface
    port: 80
    targetPort: 80
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: docker-registry
  namespace: prodlab
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/proxy-body-size: 1024m
    nginx.ingress.kubernetes.io/enable-cors: "true"    
    nginx.ingress.kubernetes.io/cors-allow-origin: "*"
    cert-manager.io/cluster-issuer: "letsencrypt-array21"

spec:
  tls:
  - hosts:
    - docker-registry.k8s.array21.dev
    secretName: docker-registry-k8s-array21-tls
  rules:
  - host: docker-registry.k8s.array21.dev
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: docker-registry
            port:
              number: 443
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: docker-dashboard-registry-ingress
  namespace: prodlab
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/cors-allow-origin: "*"
#    nginx.ingress.kubernetes.io/whitelist-source-range: "10.10.0.0/16"
    cert-manager.io/cluster-issuer: "letsencrypt-array21"

spec:
  tls:
  - hosts:
    - docker-dashboard.k8s.array21.dev
    secretName: docker-dashboard-k8s-array21-tls
  rules:
  - host: docker-dashboard.k8s.array21.dev
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: docker-registry
            port:
              number: 80
